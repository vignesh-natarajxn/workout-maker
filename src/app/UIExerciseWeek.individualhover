import React, { useEffect, useState } from "react";
import { ExerciseDay } from "./models/exerciseDay";
import "./Styles.css";
import {
  Box,
  Button,
  ButtonGroup,
  List,
  ListItem,
  ListItemText,
} from "@mui/material";
import { makeStyles } from "@mui/styles";

interface Props {
  exerciseWeek: ExerciseDay[];
}

const useStyles: any = makeStyles({
  day: {
    fontSize: 20,
    "&:hover": {
      border: "2px solid #ff8400",
    },
    marginTop: 30,
    height: 100,
    width: 170,
  },
});

interface IHover {
  [name: string]: boolean;
}

const hoverInitial: IHover = {};

export default function UIExerciseWeek({ exerciseWeek }: Props) {
  // useEffect(() => {
  //   exerciseWeek.map((exerciseDay) => {
  //     hoverInitial[exerciseDay.id]= false;
  //   });
  // }, []);

  const classes = useStyles();
  const [hover, setHover] = useState<IHover>({
    d1: false,
    d2: false,
    d3: false,
    d4: false,
    d5: false,
    d6: false,
    d7: false,
  });

  const hoverHandler = (value: boolean, exname: string) => {
    setHover((data) => {
      data[exname] = value;
      return data;
    });
    setHover((data) => data);
    console.log(hover);
  };

  const daySelect = () => {
    console.log("yolo");
  };

  return (
    <Box textAlign="center">
      {exerciseWeek.map((exerciseDay) => {
        if (!hover[exerciseDay.id]) {
          return (
            <Button
              onMouseEnter={() => hoverHandler(true, exerciseDay.id)}
              onMouseLeave={() => hoverHandler(false, exerciseDay.id)}
              key={exerciseDay.id}
              onClick={daySelect}
              className={classes.day}
              variant="contained"
              color="secondary"
            >
              {exerciseDay.name}
              {/* {(hover[exerciseDay.id]===true)? (
              <List>
                {exerciseDay.exercises.map((exercise) => (
                  <ListItemText primary={exercise.name} />
                ))}
              </List>
            ) : (
              <h1>{exerciseDay.name}</h1>
            )} */}
            </Button>
          );
        } else {
          return (
            <Button
              onMouseEnter={() => hoverHandler(true, exerciseDay.id)}
              onMouseLeave={() => hoverHandler(false, exerciseDay.id)}
              key={exerciseDay.id}
              onClick={daySelect}
              className={classes.day}
              variant="contained"
              color="secondary"
            >
              ffff
              {/* {(hover[exerciseDay.id]===true)? (
                <List>
                  {exerciseDay.exercises.map((exercise) => (
                    <ListItemText primary={exercise.name} />
                  ))}
                </List>
              ) : (
                <h1>{exerciseDay.name}</h1>
              )} */}
            </Button>
          );
        }
      })}
      {<Box></Box>}
    </Box>
  );
}
